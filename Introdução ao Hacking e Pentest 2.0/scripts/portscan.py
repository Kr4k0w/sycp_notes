#!/usr/bin/env python3

import socket


def sending_data() -> str:
    """
    Função para criar uma conexão, enviar dados e receber uma resposta.
    """

    # Cria uma variável para instanciar o objeto `socket`
    # determinando a família como AF_INET (IPv4) e o tipo SOCK_STREAM (TCP)
    client: socket.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Realiza a conexão através de uma tupla com o domínio e a porta.
    client.connect(("bancocn.com", 80))
    # Envia para um 'hello world' convertendo para `bytes`.
    client.send(b"hello world")
    # Cria uma variável para receber a resposta do client utilizando
    # o método `recv()` e aguardando receber 1024 bytes de dados.
    response: bytes = client.recv(1024)
    # printa a resposta do cliente e realiza um decode dos bytes para string.

    return response.decode()


def scan() -> str:
    # Lista para instanciar as portas mais comuns utilizadas em serviços
    ports: list = [80, 21, 22, 443, 445, 3306, 25]

    for port in ports:
        client: socket.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # setamos o timeout em 0.1 segundos ao tentar uma conexão
        client.settimeout(0.1)
        # o método connect_ex() irá retornar um int para identificar o
        # resultado da conexão (0 = conexão estabelecida)
        code: int = client.connect_ex(("bancocn.com", port))
        # Variável para validar se a porta está aberta ou fechada dependendo
        # do valor retornado por `code`.
        status: str = f"[+] {port} OPEN" if code == 0 else f"[-] {port} CLOSED"

        return status
